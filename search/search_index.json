{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Single sample pathway analysis toolkit","text":"<p>sspa provides a Python interface for metabolomics pathway analysis. In addition to conventional methods over-representation analysis (ORA) and gene/metabolite set enrichment analysis (GSEA), it also provides a wide range of single-sample pathway analysis (ssPA) methods. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Over-representation analysis</li> <li>Metabolite set enrichment analysis (based on GSEA)</li> <li>Single-sample pathway analysis</li> <li>Compound identifier conversion</li> <li>Pathway database download (KEGG, Reactome, and MetExplore metabolic networks)</li> </ul> <pre><code>graph LR \n  A[Download pathways ] --&gt; C;\n  B[Input data] --&gt; G[Identifier conversion];\n  G --&gt;C[Pathway analysis];\n  C --&gt; D[ORA];\n  C --&gt; E[GSEA];\n  C --&gt; F[ssPA];</code></pre> <p>Note</p> <p>Although this package is designed to provide a user-friendly interface for metabolomics pathway analysis, the methods are also applicable to other datatypes such as normalised RNA-seq data. Gene/protein pathway collections can be input as .GMT files (see tutorials).</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install sspa\n</code></pre>"},{"location":"#citing-us","title":"Citing us","text":"<p>If you found this package useful, please consider citing us:</p> <p>ssPA package <pre><code>@article{Wieder22a,\n   author = {Cecilia Wieder and Nathalie Poupin and Cl\u00e9ment Frainay and Florence Vinson and Juliette Cooke and Rachel PJ Lai and Jacob G Bundy and Fabien Jourdan and Timothy MD Ebbels},\n   doi = {10.5281/ZENODO.6959120},\n   month = {8},\n   title = {cwieder/py-ssPA: v1.0.4},\n   url = {https://zenodo.org/record/6959120},\n   year = {2022},\n}\n</code></pre></p> <p>Single-sample pathway analysis in metabolomics <pre><code>@article{Wieder2022,\n   author = {Cecilia Wieder and Rachel P J Lai and Timothy M D Ebbels},\n   doi = {10.1186/s12859-022-05005-1},\n   issn = {1471-2105},\n   issue = {1},\n   journal = {BMC Bioinformatics},\n   pages = {481},\n   title = {Single sample pathway analysis in metabolomics: performance evaluation and application},\n   volume = {23},\n   url = {https://doi.org/10.1186/s12859-022-05005-1},\n   year = {2022},\n}\n</code></pre></p>"},{"location":"sklearn_sspa/","title":"SKlearn-enabled machine learning using ssPA scores","text":"<p>We will use a simple example to demonstrate how to use the sspa scores as features in a machine learning model. We will use ssPA scores generated using the <code>sspa.sspa_SVD</code> (PLAGE) method as input to a logistic regression model to predict COVID-19 status.</p> <p>Import required packages: <pre><code>from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nfrom sklearn.metrics import confusion_matrix\n</code></pre> Convert COVID status to binary labels <pre><code>labels = [1 if i == \"COVID19 \" else 0 for i in covid_data[\"Group\"]]\n</code></pre></p> <p>Split the data into training and test sets</p> <pre><code>X_train, X_test, y_train, y_test = train_test_split(covid_data.iloc[:, :-2], labels, test_size=0.2, random_state=42)\n</code></pre> <p>Standardise the data</p> <pre><code>scaler = StandardScaler().fit(X_train)\nX_train = pd.DataFrame(scaler.transform(X_train), columns=X_train.columns, index=X_train.index)\nX_test = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns, index=X_test.index)\n</code></pre> <p>Create ssPA scores for test and train data separately <pre><code>sspa_svd_transformer = sspa.sspa_SVD(reactome_pathways, min_entity=3).fit(X_train)\nsspa_train = sspa_svd_transformer.transform(X_train)\nsspa_test = sspa_svd_transformer.transform(X_test)\n</code></pre></p> <p>We can now fit the model based on pathway scores <pre><code># Create a logistic regression model\nclf = LogisticRegression(penalty='l1', solver='liblinear', random_state=42, max_iter=1000)\nclf.fit(sspa_train, y_train)\n\n# Predict the test set\ny_pred = clf.predict(sspa_test)\n</code></pre> And evaluate the model performance</p> <p><pre><code># Calculate the accuracy\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\n\n# Calculate the AUC\nprint(\"AUC:\", roc_auc_score(y_test, y_pred))\n\n# Plot the confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nsns.set_style('white')\nsns.heatmap(cm, annot=True, fmt='g', cmap='Blues', cbar=False, square=True)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion matrix')\nplt.show()\n</code></pre> </p> <p>We can also interpret the model in terms of pathways by looking at feature importance. In this case we will look at the regression coefficients of the logistic regression model.</p> <p><pre><code># Exract the coefficients from the model\ncoef = pd.DataFrame(clf.coef_.T, index=sspa_train.columns, columns=[\"Coefficient\"])\ncoef[\"Pathway\"] = coef.index.map(dict(zip(reactome_pathways.index, reactome_pathways['Pathway_name'])))\ncoef = coef.sort_values(by=\"Coefficient\")\n\n# filter out non-zero coefficients\ncoef_filt = coef[coef[\"Coefficient\"] != 0]\n\n# Plot the coefficients\nplt.figure(figsize=(8, 6))\nsns.barplot(data=coef_filt, x=\"Coefficient\", y=\"Pathway\")\nplt.tight_layout()\nplt.show()\n</code></pre> </p>"},{"location":"sklearn_sspa/#using-sspa-functions-as-part-of-sklearn-pipelines","title":"Using ssPA functions as part of SKLearn pipelines","text":"<p>We may want to apply an ssPA transformation as part of a pre-processing pipeline to prepare test-train splits. We can integrate ssPA functions into sklearn pipelines like so: <pre><code># create pipeline for missing value imputation, standardisation, and sspa transformation\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\n\n# create pipeline\nsspa_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='median').set_output(transform=\"pandas\")),\n    ('scaler', StandardScaler().set_output(transform=\"pandas\")),\n    ('sspa', sspa_KPCA(reactome_pathways, min_entity=5))\n])\n\n# apply the pipeline to test and train data\nsspa_train = sspa_pipeline.fit_transform(X_train)\nsspa_test = sspa_pipeline.transform(X_test)\n</code></pre></p>"},{"location":"tutorials/","title":"Getting started","text":"<p>Please see our interactive walkthrough tutorial for a detailed overview on the package functionalities:</p> <p></p>"},{"location":"tutorials/#quickstart-quide","title":"Quickstart quide","text":"<p>Load Reactome pathways <pre><code>reactome_pathways = sspa.process_reactome(organism=\"Homo sapiens\")\n</code></pre></p> <p>Load some example metabolomics data in the form of a pandas DataFrame:</p> <pre><code>covid_data_processed = sspa.load_example_data(omicstype=\"metabolomics\", processed=True)\n</code></pre> <p>Generate pathway scores using kPCA method</p> <pre><code>kpca_scores = sspa.sspa_KPCA(reactome_pathways, min_entity=3).fit_transform(covid_data_processed.iloc[:, :-2])\n</code></pre>"},{"location":"tutorials/#input-data","title":"Input data","text":"<p>The input data should consist of an \\(m\u00d7n\\) pandas DataFrame of values corresponding to the abundance of all annotated metabolites, either as absolute (concentrations) or relative (peak intensities) quantifications. Rows represent \\(m\\) samples and columns represent \\(n\\) annotated compounds. </p> <p>Sample metadata is necessary for some types of pathway analysis, particularly the conventional methods over-representation analysis (ORA) and gene set enrichment analysis (GSEA). Sample metadata should contain details of the clinical outcome or phenotype used for comparison and should be represented as a column either as part of the metabolite abundance DataFrame, or as a separate column/Series, as long as the sample identifiers can be matched between data structures. </p> Example <p>Below is a condensed example of the input data format:</p> sample_id spermidine 1-methylnicotinamide 12,13-DiHOME alpha-ketoglutarate kynurenate Group 1004596 -0.756979 0.552163 -0.317382 0.726321 -0.608606 A 1008097 0.079818 -0.839393 0.49128 -1.867786 -0.044496 A 1008631 0.978372 -1.281277 -0.199487 0.355229 0.014784 B 1012545 -0.93754 -0.242391 1.63653 2.080704 -0.31561 B 1022407 -0.652496 -0.110733 0.814461 -0.886903 0.409608 B <p>The index are sample identifiers and the column names are metabolite names/identifiers. Metdata columns can also be added at the end of the DataFrame.</p>"},{"location":"tutorials/#loading-pathways","title":"Loading pathways","text":"<pre><code># Pre-loaded pathways\n# Reactome v78\nreactome_pathways  = sspa.process_reactome(organism=\"Homo sapiens\")\n\n#\u00a0KEGG v98\nkegg_human_pathways  = sspa.process_kegg(organism=\"hsa\")\n</code></pre> <p>Load a custom GMT file (extension .gmt or .csv) <pre><code>custom_pathways = sspa.process_gmt(\"wikipathways-20220310-gmt-Homo_sapiens.gmt\")\n</code></pre></p> <p>Download latest version of pathways <pre><code># download KEGG latest\nkegg_mouse_latest = sspa.process_kegg(\"mmu\", download_latest=True, filepath=\".\")\n\n# download Reactome latest\nreactome_mouse_latest = sspa.process_reactome(\"Mus musculus\", download_latest=True, filepath=\".\")\n</code></pre></p> <p>Note</p> <p>Downloading the lastest version of KEGG pathways can take up to ten minutes. </p>"},{"location":"tutorials/#identifier-harmonization","title":"Identifier harmonization","text":"<pre><code># download the conversion table\ncompound_names = processed_data.columns.tolist()\nconversion_table = sspa.identifier_conversion(input_type=\"name\", compound_list=compound_names)\n\n# map the identifiers to your dataset\nprocessed_data_mapped = sspa.map_identifiers(conversion_table, output_id_type=\"ChEBI\", matrix=processed_data)\n</code></pre> <p>Warning</p> <p>This step requries active internet connection and access to the MetaboAnalyst API. If you are experiencing errors please check you are able to query the API.</p>"},{"location":"tutorials/#conventional-pathway-analysis","title":"Conventional pathway analysis","text":"<p>ORA <pre><code>ora = sspa.sspa_ora(processed_data_mapped, covid_data[\"Group\"], reactome_pathways, 0.05, DA_testtype='ttest', custom_background=None)\n\n#\u00a0perform ORA \nora_res = ora.over_representation_analysis()\n\n#\u00a0get t-test results\nora.ttest_res\n\n#\u00a0obtain list of differential molecules input to ORA\nora.DA_test_res\n</code></pre></p> <p>Statistical tests for selecing differential molecules</p> <p>In over-representation the list of molecules of interest, or 'differential genes/metabolites/proteins, etc' are often determined using a statistical test such as the Student's t-test. In the sspa_ora function we allow users to specify the type of test used for this purpose, either <code>DA_testtype='ttest'</code> to use an independent samples t-test (default), or <code>DA_testtype='mwu'</code> to use a Mann Whitney U test. </p> <p>GSEA <pre><code>sspa.sspa_gsea(processed_data_mapped, covid_data['Group'], reactome_pathways)\n</code></pre></p>"},{"location":"tutorials/#single-sample-pathway-analysis-methods","title":"Single sample pathway analysis methods","text":"<p>All ssPA methods now have a <code>fit()</code>, <code>transform()</code> and <code>fit_transform()</code> method for compatibility with SciKitLearn. This allows integration of ssPA transformation with various machine learning functions in SKLearn such as <code>Pipeline</code> and <code>GridSearchCV</code>. Specifically for <code>sspa.sspa_ssClustPA</code>, <code>sspa.sspa_SVD</code>, and <code>sspa.sspa_KPCA</code> methods the model can be fit on the training data and the test data is transformed using the fitted model. <pre><code># ssclustPA\nssclustpa_res = sspa.sspa_ssClustPA(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n\n# kPCA \nkpca_scores = sspa.sspa_kpca(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n\n# z-score (Lee et al. 2008)\nzscore_res = sspa.sspa_zscore(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n\n# SVD (PLAGE, Tomfohr et al. 2005)\nsvd_res = sspa.sspa_svd(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n\n# ssGSEA (Barbie et al. 2009)\nssgsea_res = sspa.sspa_ssGSEA(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n</code></pre></p>"},{"location":"gendocs_docs/","title":"sspa","text":""},{"location":"gendocs_docs/#single-sample-pathway-analysis-toolkit","title":"Single sample pathway analysis toolkit","text":"<p>sspa provides a Python interface for metabolomics pathway analysis. In addition to conventional methods over-representation analysis (ORA) and gene/metabolite set enrichment analysis (GSEA), it also provides a wide range of single-sample pathway analysis (ssPA) methods. </p>"},{"location":"gendocs_docs/#features","title":"Features","text":"<ul> <li>Over-representation analysis</li> <li>Metabolite set enrichment analysis (based on GSEA)</li> <li>Single-sample pathway analysis</li> <li>Compound identifier conversion</li> <li>Pathway database download (KEGG, Reactome, and PathBank)</li> </ul> <p>Although this package is designed to provide a user-friendly interface for metabolomics pathway analysis, the methods are also applicable to other datatypes such as normalised RNA-seq and proteomics data. </p>"},{"location":"gendocs_docs/#documentation-and-tutorials","title":"Documentation and tutorials","text":"<p>This README provides a quickstart guide to the package and its functions. For new users we highly recommend following our full walkthrough notebook tutorial available on Google Colab which provides a step-by-step guide to using the package.</p> <p></p> <p>Click the link above and save a copy of the Colab notebook to your Google Drive. Alternatively, you can download the notebook from the Colab tutorial as an '.ipynb' file and run it locally using Jupyter Notebook or Jupyter Lab.</p> <p>Documentation is available on our Read the Docs page. This includes a function API reference. </p>"},{"location":"gendocs_docs/#quickstart","title":"Quickstart","text":"<p><pre><code>pip install sspa\n</code></pre> Load Reactome pathways <pre><code>reactome_pathways  = sspa.process_reactome(organism=\"Homo sapiens\")\n</code></pre></p> <p>Load some example metabolomics data in the form of a pandas DataFrame:</p> <pre><code>covid_data_processed = sspa.load_example_data(omicstype=\"metabolomics\", processed=True)\n</code></pre> <p>Generate pathway scores using kPCA method</p> <pre><code>kpca_scores = sspa.sspa_kpca(reactome_pathways, min_entity=2).fit_transform(covid_data_processed.iloc[:, :-2])\n</code></pre>"},{"location":"gendocs_docs/#loading-example-data","title":"Loading example data","text":"<p>Note we provide processed and non-processed versins of the COVID example metabolomics dataset (Su et al. 2020, Cell). The processed version (set <code>processed=True</code>) already has ChEBI identifiers as column names, whereas the non-processed version has metabolite names. </p> <pre><code>covid_data = sspa.load_example_data(omicstype=\"metabolomics\", processed=False)\n</code></pre> <p>Here we demonstrate some simple pre-processing for this dataset in order to enable conventional and ssPA pathway analysis:</p> <pre><code># Keep only metabolites (exclude metadata columns)\ncovid_values = covid_data.iloc[:, :-2]\n\n# Remove metabolites with too many NA values\ndata_filt = covid_values.loc[:, covid_values.isin([' ', np.nan, 0]).mean() &lt; 0.5]\n\n# Impute using the median\nimputed_mat = data_filt.fillna(data_filt.median())\n\n# Log transform the data\nlog2_mat = np.log2(imputed_mat)\n\n# Standardise the data (metabolite values) using z-score (mean=0, std=1) by subtracting the mean and dividing by the standard deviation\nprocessed_data = (log2_mat - log2_mat.mean(axis=0)) / log2_mat.std(axis=0)\n</code></pre>"},{"location":"gendocs_docs/#loading-pathways","title":"Loading pathways","text":"<pre><code># Pre-loaded pathways\n# Reactome v78\nreactome_pathways = sspa.process_reactome(organism=\"Homo sapiens\")\n\n#\u00a0KEGG v98\nkegg_human_pathways = sspa.process_kegg(organism=\"hsa\")\n</code></pre> <p>Load a custom GMT file (extension .gmt or .csv) <pre><code>custom_pathways = sspa.process_gmt(\"wikipathways-20220310-gmt-Homo_sapiens.gmt\")\n</code></pre></p> <p>Download latest version of pathways <pre><code># download KEGG latest metabolomics pathways\nkegg_mouse_latest = sspa.process_kegg(\"mmu\", download_latest=True, filepath=\".\")\n\n# download Reactome latest metabolomics pathways\nreactome_mouse_latest = sspa.process_reactome(\"Mus musculus\", download_latest=True, filepath=\".\", omics_type='metabolomics')\n\n# download Pathbank latest metabolomics pathways\npathbank_human_latest = sspa.process_pathbank(\"Homo sapiens\", download_latest=True, filepath=\".\", omics_type='metabolomics')\n</code></pre></p> <p>Download latest version of multi-omics pathways - For Reactome, users can specify the omics types required via the 'identifiers' argument. Leaving this to None downloads all omics (ChEBI, UniProt, Gene Symbol). Users can specify any combination of <code>['chebi', 'uniprot', 'gene_symbol']</code>.  - For KEGG, multi-omics pathways are represented by KEGG gene and KEGG compound identifiers. </p> <pre><code># download multi-omics pathways from Reactome (ChEBI, UniProt, Gene Symbol)\nreactome_human_mo = sspa.process_reactome('Homo sapiens', download_latest=True, filepath=\".\", omics_type='multiomics', identifiers=['chebi', 'uniprot', 'gene_symbol'])\n\n# download multi-omics pathways from Reactome (ChEBI and UniProt)\nreactome_human_mo = sspa.process_reactome('Homo sapiens', download_latest=True, filepath=\".\", omics_type='multiomics', identifiers=['chebi', 'uniprot'])\n\n# download multi-omics pathways from KEGG (KEGG gene and KEGG compound)\nkegg_mouse_latest = sspa.process_kegg(\"mmu\", download_latest=True, filepath=\".\", omics_type='multiomics')\n</code></pre>"},{"location":"gendocs_docs/#identifier-harmonization","title":"Identifier harmonization","text":"<p>Note: KEGG pathways use KEGG compound IDs, Reactome and Pathbank pathways use ChEBI and UniProt (for proteins) <pre><code># download the conversion table\ncompound_names = processed_data.columns.tolist()\nconversion_table = sspa.identifier_conversion(input_type=\"name\", compound_list=compound_names)\n\n# map the identifiers to your dataset\nprocessed_data_mapped = sspa.map_identifiers(conversion_table, output_id_type=\"ChEBI\", matrix=processed_data)\n</code></pre></p>"},{"location":"gendocs_docs/#conventional-pathway-analysis","title":"Conventional pathway analysis","text":"<p>Over-representation analysis (ORA) <pre><code>ora = sspa.sspa_ora(processed_data_mapped, covid_data[\"Group\"], reactome_pathways, 0.05, DA_testtype='ttest', custom_background=None)\n\n#\u00a0perform ORA \nora_res = ora.over_representation_analysis()\n\n#\u00a0get t-test results\nora.ttest_res\n\n#\u00a0obtain list of differential molecules input to ORA\nora.DA_test_res\n</code></pre></p> <p>Gene Set Enrichment Analysis (GSEA), applicable to any type of omics data</p> <pre><code>sspa.sspa_gsea(processed_data_mapped, covid_data['Group'], reactome_pathways)\n</code></pre>"},{"location":"gendocs_docs/#single-sample-pathway-analysis-methods","title":"Single sample pathway analysis methods","text":"<p>All ssPA methods now have a <code>fit()</code>, <code>transform()</code> and <code>fit_transform()</code> method for compatibility with SciKitLearn. This allows integration of ssPA transformation with various machine learning functions in SKLearn such as <code>Pipeline</code> and <code>GridSearchCV</code>. Specifically for <code>sspa.sspa_ssClustPA</code>, <code>sspa.sspa_SVD</code>, and <code>sspa.sspa_KPCA</code> methods the model can be fit on the training data and the test data is transformed using the fitted model.</p> <pre><code># ssclustPA\nssclustpa_res = sspa.sspa_ssClustPA(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n\n# kPCA \nkpca_scores = sspa.sspa_kpca(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n\n# z-score (Lee et al. 2008)\nzscore_res = sspa.sspa_zscore(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n\n# SVD (PLAGE, Tomfohr et al. 2005)\nsvd_res = sspa.sspa_svd(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n\n# ssGSEA (Barbie et al. 2009)\nssgsea_res = sspa.sspa_ssGSEA(reactome_pathways, min_entity=2).fit_transform(processed_data_mapped)\n</code></pre>"},{"location":"gendocs_docs/#license","title":"License","text":"<p>GNU GPL 3.0</p>"},{"location":"gendocs_docs/#citing-us","title":"Citing us","text":"<p>If you found this package useful, please consider citing us:</p> <p>ssPA package <pre><code>@article{Wieder22a,\n   author = {Cecilia Wieder and Nathalie Poupin and Cl\u00e9ment Frainay and Florence Vinson and Juliette Cooke and Rachel PJ Lai and Jacob G Bundy and Fabien Jourdan and Timothy MD Ebbels},\n   doi = {10.5281/ZENODO.6959120},\n   month = {8},\n   title = {cwieder/py-ssPA: v1.0.4},\n   url = {https://zenodo.org/record/6959120},\n   year = {2022},\n}\n</code></pre></p> <p>Single-sample pathway analysis in metabolomics <pre><code>@article{Wieder2022,\n   author = {Cecilia Wieder and Rachel P J Lai and Timothy M D Ebbels},\n   doi = {10.1186/s12859-022-05005-1},\n   issn = {1471-2105},\n   issue = {1},\n   journal = {BMC Bioinformatics},\n   pages = {481},\n   title = {Single sample pathway analysis in metabolomics: performance evaluation and application},\n   volume = {23},\n   url = {https://doi.org/10.1186/s12859-022-05005-1},\n   year = {2022},\n}\n</code></pre></p>"},{"location":"gendocs_docs/#contributing","title":"Contributing","text":"<p>Read our contributor's guide to get started</p>"},{"location":"gendocs_docs/#contributors","title":"Contributors","text":"<p>We are grateful for our contributors who help develop and maintain py-ssPA: - Ma\u00eblick Brochut @mbrochut</p>"},{"location":"gendocs_docs/#news-and-updates","title":"News and updates","text":"Read more  ### [v1.0.2] - 4/12/23 - Enable download of Pathbank pathways (metabolite and protein) via the `process_pathbank()` function  ### [v1.0.0] - 25/08/23 - Add compatability with SciKitLearn by implementing `fit()`, `transform()` and `fit_transform()` methods for all ssPA methods. This allows integration of ssPA transformation with various machine learning functions in SKLearn such as `Pipeline` and `GridSearchCV`. Specifically for `sspa.sspa_ssClustPA`, `sspa.sspa_SVD`, and `sspa.sspa_KPCA` methods the model can be fit on the training data and the test data is transformed using the fitted model.  - Fixed ID conversion bug in `sspa.map_identifiers()` due to MetaboAnalyst API URL change  ### [v0.2.4] - 04/07/23 Enable the download of multi-omics (ChEBI and UniProt) Reactome pathways for multi-omics integration purposes. Enable `omics_type='multiomics'` to download: <pre><code>reactome_mouse_latest_mo = sspa.process_reactome(\"Mus musculus\", download_latest=True, filepath=\".\", omics_type='multiomics')\n</code></pre>  ### [v0.2.3] - 23/06/23 - @mbrochut Bug fix in KEGG pathway downloader  - @mbrochut Add tqdm progress bar for long KEGG downloads  ### [v0.2.1] - 05/01/23 - Removal of rpy2 dependency for improved compatibility across systems - Use [GSEApy](https://github.com/zqfang/GSEApy) as backend for GSEA and ssGSEA  - Minor syntax changes    - `ora.ttest_res` is now `ora.DA_test_res` (as we can implement t-test or MWU tests)    - `sspa_fgsea()` is now `sspa_gsea()` and uses gseapy as the backend rather than R fgsea    - `sspa_gsva()` is temporarily deprecated due to the need for the rpy2 compatability - use the [GSVA R package](https://bioconductor.org/packages/release/bioc/html/GSVA.html)"},{"location":"gendocs_docs/contributing/","title":"How to contribute to py-ssPA","text":"<p>Thank you for supporting the ssPA project and using your valuable time to contribute! py-ssPA is open-source software and we welcome any contributions to help make the project better.</p>"},{"location":"gendocs_docs/contributing/#issues","title":"Issues","text":"<p>Please submit any issues or bugs via the GitHub issues page. Please include details about the ssPA minor version used (<code>sspa.__version__</code>) as well as any relevant input data. </p>"},{"location":"gendocs_docs/contributing/#submitting-changes","title":"Submitting changes","text":"<p>Please submit any changes via a pull request. These will be reviewed by the ssPA developers and merged in due course. </p>"},{"location":"gendocs_docs/reference/GSEA/","title":"GSEA","text":""},{"location":"gendocs_docs/reference/GSEA/#sspa_gsea","title":"sspa_gsea","text":"<p>source <pre><code>.sspa_gsea(\n   mat, metadata, pathway_df, ranking_metric = 'signal_to_noise', min_entity = 2\n)\n</code></pre></p> <p>Run GSEA using gseapy package by zqfang (https://github.com/zqfang/GSEApy)</p> <p>Args</p> <ul> <li>mat (pd.DataFrame) : dataframe containing input metabolomics data</li> <li>metadata (pd.Series) : series containing phenotype metadata e.g 'COVID', 'NON-COVID'</li> <li>pathway_df (pd.DataFrame) : GMT-like pathway dataframe containing compound identifiers</li> <li>ranking_metric (str) : Ranking metric for molecules in GSEA. Default is signal-to-noise ratio.      Other options are 't_test' and see GSEApy package https://github.com/zqfang/GSEApy/blob/2b5419e14615b6fd19a575ff065256dc7099bbec/gseapy/gsea.py#L135 for more options. </li> <li>min_entity (int, optional) : minimum number of molecules mapping to pathways for GSEA to be performed. Defaults to 2.</li> </ul>"},{"location":"gendocs_docs/reference/ORA/","title":"ORA","text":""},{"location":"gendocs_docs/reference/ORA/#sspa_ora","title":"sspa_ora","text":"<p>source <pre><code>sspa_ora(\n   mat, metadata, pathways, DA_cutoff, DA_testtype = 'ttest',\n   custom_background = None\n)\n</code></pre></p> <p>Class for overrepresentation analysis </p> <p>Attributes</p> <ul> <li>mat (pd.DataFrame) : dataframe containing input metabolomics data</li> <li>metadata (pd.Series) : series containing phenotype metadata e.g 'COVID', 'NON-COVID'</li> <li>pathways (pd.DataFrame) : pathway dataframe containing compound identifiers</li> <li>DA_cutoff (float) : pFDR cutoff for selecting differential metabolites e.g. 0.05 or 0.01</li> <li>DA_testtype (str) : Test type for selecing differential metabolites. Can either be 'ttest' (default) for the independent students T-test or 'mwu' for the Mann Whitney U test, both as implemented in SciPy. </li> <li>custom_background (list) : background list of identifiers, default is to use annotated compounds in input data (i.e. mat.columns)</li> </ul> <p>Methods:</p>"},{"location":"gendocs_docs/reference/ORA/#over_representation_analysis","title":".over_representation_analysis","text":"<p>source <pre><code>.over_representation_analysis()\n</code></pre></p> <p>Function for over representation analysis using Fisher exact test (right tailed)</p> <p>Returns</p> <p>DataFrame of ORA results for each pathway, p-value, FDR p-value, hits ratio, coverage of pathway, and identifiers of differential metabolites </p>"},{"location":"gendocs_docs/reference/SVD/","title":"SVD","text":""},{"location":"gendocs_docs/reference/SVD/#sspa_svd","title":"sspa_SVD","text":"<p>source <pre><code>sspa_SVD(\n   pathway_df, min_entity = 2, random_state = 0\n)\n</code></pre></p> <p>Tomfohr et al 2005 PLAGE (SVD) method for single sample pathway analysis</p> <p>Args</p> <ul> <li>pathway_df (pd.DataFrame) : pandas DataFrame of pathway identifiers (keys) and corresponding list of pathway entities (values).</li> <li>min_entity (int) : minimum number of metabolites mapping to pathways for ssPA to be performed Entity identifiers must match those in the matrix columns</li> </ul> <p>Methods:</p>"},{"location":"gendocs_docs/reference/SVD/#fit","title":".fit","text":"<p>source <pre><code>.fit(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <ul> <li>self  : object</li> </ul>"},{"location":"gendocs_docs/reference/SVD/#transform","title":".transform","text":"<p>source <pre><code>.transform(\n   X, y = None\n)\n</code></pre></p> <p>Transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <ul> <li>self  : object</li> </ul>"},{"location":"gendocs_docs/reference/SVD/#fit_transform","title":".fit_transform","text":"<p>source <pre><code>.fit_transform(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X and transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <ul> <li>self  : object</li> </ul>"},{"location":"gendocs_docs/reference/SVD/#fit_transform_","title":".fit_transform_","text":"<p>source <pre><code>.fit_transform_(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X and transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <ul> <li>self  : object</li> </ul>"},{"location":"gendocs_docs/reference/identifier_conversion/","title":"Identifier conversion","text":""},{"location":"gendocs_docs/reference/identifier_conversion/#identifier_conversion","title":"identifier_conversion","text":"<p>source <pre><code>.identifier_conversion(\n   input_type, compound_list\n)\n</code></pre></p> <p>Use Metaboanalyst API for identifier conversion</p> <p>Args</p> <ul> <li>input_type (str) : identifier type present in input data - any of ('name', 'hmdb', 'pubchem', 'chebi', 'metlin', 'kegg')</li> <li>compound_list (list) : list of identifiers in the data</li> </ul> <p>Returns</p> <p>(pd.DataFrame) Dataframe containing identifier matches </p>"},{"location":"gendocs_docs/reference/identifier_conversion/#map_identifiers","title":"map_identifiers","text":"<p>source <pre><code>.map_identifiers(\n   query_df, output_id_type, matrix\n)\n</code></pre></p> <p>Map desired identifiers to input data</p> <p>Args</p> <ul> <li>query_df (pd.DataFrame) : DataFrame obtained using the identifier_conversion function containing ID mappings</li> <li>output_id_type (str) : Any of ('Match', 'HMDB', 'PubChem', 'ChEBI', 'KEGG', 'METLIN','SMILES')</li> <li>matrix (pd.DataFrame) : sample-by-compound metabolomics data matrix</li> </ul> <p>Returns</p> <p>Sample-by-compound metabolomics data matrix with mapped identifiers, any compounds without a matching ID will be dropped</p>"},{"location":"gendocs_docs/reference/kPCA/","title":"kPCA","text":""},{"location":"gendocs_docs/reference/kPCA/#sspa_kpca","title":"sspa_KPCA","text":"<p>source <pre><code>sspa_KPCA(\n   pathway_df, min_entity = 2, random_state = 0\n)\n</code></pre></p> <p>Kernel PCA method for single sample pathway analysis</p> <p>Args</p> <ul> <li>pathway_df (pd.DataFrame) : pandas DataFrame of pathway identifiers (keys) and corresponding list of pathway entities (values).</li> <li>min_entity (int) : minimum number of metabolites mapping to pathways for ssPA to be performed Entity identifiers must match those in the matrix columns</li> </ul> <p>Methods:</p>"},{"location":"gendocs_docs/reference/kPCA/#fit","title":".fit","text":"<p>source <pre><code>.fit(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <ul> <li>self  : object</li> </ul>"},{"location":"gendocs_docs/reference/kPCA/#transform","title":".transform","text":"<p>source <pre><code>.transform(\n   X, y = None\n)\n</code></pre></p> <p>Transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the kPCA method. Columns represent pathways and rows represent samples.</p>"},{"location":"gendocs_docs/reference/kPCA/#fit_transform","title":".fit_transform","text":"<p>source <pre><code>.fit_transform(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X and transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the kPCA method. Columns represent pathways and rows represent samples.</p>"},{"location":"gendocs_docs/reference/kPCA/#fit_transform_","title":".fit_transform_","text":"<p>source <pre><code>.fit_transform_(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X and transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the kPCA method. Columns represent pathways and rows represent samples.</p>"},{"location":"gendocs_docs/reference/load_pathways/","title":"Load pathways","text":""},{"location":"gendocs_docs/reference/load_pathways/#process_reactome","title":"process_reactome","text":"<p>source <pre><code>.process_reactome(\n   organism, infile = None, download_latest = False, filepath = None,\n   omics_type = 'metabolomics', identifiers = None\n)\n</code></pre></p> <p>Function to load Reactome pathways </p> <p>Args</p> <ul> <li>organism (str) : Reactome organism name</li> <li>infile (str) : default None, provide a Reactome pathway file to process into the GMT-style dataframe </li> <li>download_latest (Bool) : Downloads the latest version of Reactome metabolic pathways</li> <li>filepath (str) : filepath to save pathway file to, default is None - save to variable</li> <li>omics_type (str) : If using download_latest, specify type of omics pathways to download. Options are 'metabolomics', 'proteomics', 'transcriptomics', or 'multiomics'</li> <li>identifiers (list) : list of identifiers to download for multi-omics pathways, default is None (download all). Options are 'chebi', 'uniprot', 'gene_symbol'</li> </ul> <p>Returns</p> <p>GMT-like pd.DataFrame containing Reactome pathways</p>"},{"location":"gendocs_docs/reference/load_pathways/#process_kegg","title":"process_kegg","text":"<p>source <pre><code>.process_kegg(\n   organism, infile = None, download_latest = False, filepath = None,\n   omics_type = 'metabolomics'\n)\n</code></pre></p> <p>Function to load KEGG pathways </p> <p>Args</p> <ul> <li>organism (str) : KEGG organism code</li> <li>infile (str) : default None, provide a KEGG pathway file to process into the GMT-style dataframe </li> <li>download_latest (Bool) : Downloads the latest version of KEGG metabolic pathways</li> <li>filepath (str) : filepath to save pathway file to, default is None - save to variable</li> </ul> <p>Returns</p> <p>GMT-like pd.DataFrame containing KEGG pathways</p>"},{"location":"gendocs_docs/reference/load_pathways/#process_gmt","title":"process_gmt","text":"<p>source <pre><code>.process_gmt(\n   infile\n)\n</code></pre></p> <p>Function to load pathways from a custom GMT-like file</p> <p>Args</p> <ul> <li>infile (str) : default None, provide a GMT pathway file to process into the GMT-style dataframe, file ending can be .csv or .gmt</li> </ul> <p>Returns</p> <p>GMT-like pd.DataFrame containing pathways</p>"},{"location":"gendocs_docs/reference/load_pathways/#process_pathbank","title":"process_pathbank","text":"<p>source <pre><code>.process_pathbank(\n   organism, infile = None, download_latest = False, filepath = None,\n   omics_type = 'metabolomics'\n)\n</code></pre></p> <p>Function to load PathBank pathways </p> <p>Args</p> <ul> <li>infile (str) : default None, provide a PathBank pathway file to process into the GMT-style dataframe </li> <li>download_latest (Bool) : Downloads the latest version of PathBank metabolic pathways</li> <li>filepath (str) : filepath to save pathway file to, default is None - save to variable</li> <li>omics_type (str) : If using download_latest, specify type of omics pathways to download. Options are 'metabolomics', 'proteomics', or 'multiomics'</li> </ul> <p>Returns</p> <p>GMT-like pd.DataFrame containing PathBank pathways</p>"},{"location":"gendocs_docs/reference/ssClustPA/","title":"ssClustPA","text":""},{"location":"gendocs_docs/reference/ssClustPA/#sspa_ssclustpa","title":"sspa_ssClustPA","text":"<p>source <pre><code>sspa_ssClustPA(\n   pathway_df, min_entity = 2, random_state = 0\n)\n</code></pre></p> <p>K-means based clustering method for single sample pathway analysis</p> <p>Args</p> <ul> <li>mat (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities).</li> <li>pathways (pd.DataFrame) : Dictionary of pathway identifiers (keys) and corresponding list of pathway entities (values).</li> <li>min_entity (int) : minimum number of metabolites mapping to pathways for ssPA to be performed Do not include metadata columns Entity identifiers must match those in the matrix columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the ssClustPA/(proj) method. Columns represent pathways and rows represent samples.</p> <p>Methods:</p>"},{"location":"gendocs_docs/reference/ssClustPA/#fit","title":".fit","text":"<p>source <pre><code>.fit(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <ul> <li>self  : object</li> </ul>"},{"location":"gendocs_docs/reference/ssClustPA/#transform","title":".transform","text":"<p>source <pre><code>.transform(\n   X, y = None\n)\n</code></pre></p> <p>Transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the ssClustPA/(proj) method. Columns represent pathways and rows represent samples.</p>"},{"location":"gendocs_docs/reference/ssClustPA/#fit_transform","title":".fit_transform","text":"<p>source <pre><code>.fit_transform(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X and transform X.</p>"},{"location":"gendocs_docs/reference/ssClustPA/#fit_transform_","title":".fit_transform_","text":"<p>source <pre><code>.fit_transform_(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X and transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the ssClustPA/(proj) method. Columns represent pathways and rows represent samples.</p>"},{"location":"gendocs_docs/reference/ssGSEA/","title":"ssGSEA","text":""},{"location":"gendocs_docs/reference/ssGSEA/#sspa_ssgsea","title":"sspa_ssGSEA","text":"<p>source <pre><code>sspa_ssGSEA(\n   pathway_df, min_entity = 2\n)\n</code></pre></p> <p>Barbie et al ssGSEA method for single sample pathway analysis. </p> <p>Uses the ssgsea function of the gseapy package (https://github.com/zqfang/GSEApy) as a backend. </p> <p>All credit for ssGSEA code goes to developers of the GSEAPY python package (credit:  Zhuoqing Fang, Xinyuan Liu, Gary Peltz, GSEApy:  a comprehensive package for performing gene set enrichment analysis in Python, Bioinformatics, 2022;, btac757, https://doi.org/10.1093/bioinformatics/btac757)</p> <p>Args</p> <ul> <li>pathway_df (pd.DataFrame) : pandas DataFrame of pathway identifiers (keys) and corresponding list of pathway entities (values).</li> <li>min_entity (int) : minimum number of metabolites mapping to pathways for ssPA to be performed Entity identifiers must match those in the matrix columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the ssGSEA method. Columns represent pathways and rows represent samples.</p> <p>Methods:</p>"},{"location":"gendocs_docs/reference/ssGSEA/#fit","title":".fit","text":"<p>source <pre><code>.fit(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <ul> <li>self  : object</li> </ul>"},{"location":"gendocs_docs/reference/ssGSEA/#transform","title":".transform","text":"<p>source <pre><code>.transform(\n   X, y = None\n)\n</code></pre></p> <p>Transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the ssGSEA method. Columns represent pathways and rows represent samples.</p>"},{"location":"gendocs_docs/reference/ssGSEA/#fit_transform","title":".fit_transform","text":"<p>source <pre><code>.fit_transform(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X and transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the ssGSEA method. Columns represent pathways and rows represent samples.</p>"},{"location":"gendocs_docs/reference/utils/","title":"Utils","text":""},{"location":"gendocs_docs/reference/utils/#load_example_data","title":"load_example_data","text":"<p>source <pre><code>.load_example_data(\n   omicstype = 'metabolomics', processed = True\n)\n</code></pre></p> <p>Loads example datasets</p> <p>Args</p> <ul> <li>omicstype (str) : type of omics for example data.      Available options are \"metabolomics\" or \"transcriptomics\".      Metabolomics data are from Su et al 2020 https://doi.org/10.1016/j.cell.2020.10.037.     Transcriptomics data - TO BE IMPLEMENTED</li> <li>processed (bool) : Load processed (normalised, scaled) or raw data</li> </ul> <p>Returns</p> <p>pre-processed omics data matrix consisting of m samples and n entities (metabolites/genes) in the form of a pandas DataFrame.  Contains one of more metadata columns at the end.</p>"},{"location":"gendocs_docs/reference/utils/#t_tests","title":"t_tests","text":"<p>source <pre><code>.t_tests(\n   matrix, classes, multiple_correction_method, testtype = 'ttest'\n)\n</code></pre></p> <p>Performs two-sample independent t-tests</p> <p>Args</p> <ul> <li>matrix (pd.DataFrame) : processed sample-by-compound metabolomics dataframe</li> <li>classes (pd.Series) : pandas series containing phenotype metadata (e.g. 'COVID', 'NON-COVID')</li> <li>multiple_correction_method (str) : see https://www.statsmodels.org/dev/generated/statsmodels.stats.multitest.multipletests.html for options</li> <li>testtype (str) : Default is t-test, \"mwu\" also available to implement the Mann Whitney U test</li> </ul> <p>Returns</p> <p>pd.DataFrame containing p-values and corrected p-values for each metabolite</p>"},{"location":"gendocs_docs/reference/utils/#pathwaydf_to_dict","title":"pathwaydf_to_dict","text":"<p>source <pre><code>.pathwaydf_to_dict(\n   df\n)\n</code></pre></p> <p>Converts pathway dataframe to dictionary, with pathway IDs as keys and metabolite lists as values</p> <p>Args</p> <ul> <li>df (pd.DataFrame) : Pandas DataFrame containing pathways </li> </ul> <p>Returns</p> <p>python dict pathway representation</p>"},{"location":"gendocs_docs/reference/zscore/","title":"Zscore","text":""},{"location":"gendocs_docs/reference/zscore/#sspa_zscore","title":"sspa_zscore","text":"<p>source <pre><code>sspa_zscore(\n   pathway_df, min_entity = 2\n)\n</code></pre></p> <p>Lee at al 2008 z-score method for single sample pathway analysis</p> <p>Args</p> <ul> <li>mat (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities).</li> <li>pathways (pd.DataFrame) : Dictionary of pathway identifiers (keys) and corresponding list of pathway entities (values).</li> <li>min_entity (int) : minimum number of metabolites mapping to pathways for ssPA to be performed Do not include metadata columns Entity identifiers must match those in the matrix columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the z-score method. Columns represent pathways and rows represent samples.</p> <p>Methods:</p>"},{"location":"gendocs_docs/reference/zscore/#fit","title":".fit","text":"<p>source <pre><code>.fit(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <ul> <li>self  : object</li> </ul>"},{"location":"gendocs_docs/reference/zscore/#transform","title":".transform","text":"<p>source <pre><code>.transform(\n   X, y = None\n)\n</code></pre></p> <p>Transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the z-score method. Columns represent pathways and rows represent samples.</p>"},{"location":"gendocs_docs/reference/zscore/#fit_transform","title":".fit_transform","text":"<p>source <pre><code>.fit_transform(\n   X, y = None\n)\n</code></pre></p> <p>Fit the model with X and transform X.</p> <p>Args</p> <ul> <li>X (pd.DataFrame) : pandas DataFrame omics data matrix consisting of m rows (samples) and n columns (entities). Do not include metadata columns</li> </ul> <p>Returns</p> <p>pandas DataFrame of pathway scores derived using the z-score method. Columns represent pathways and rows represent samples.</p>"}]}